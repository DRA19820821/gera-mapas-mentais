#!/usr/bin/env python3
"""
Script de valida√ß√£o da instala√ß√£o.
Testa se todos os componentes est√£o configurados corretamente.

Uso: python test_setup.py
"""

import sys
import os
from pathlib import Path

def print_header(text):
    """Imprime cabe√ßalho formatado."""
    print("\n" + "="*60)
    print(f"  {text}")
    print("="*60)

def check_python_version():
    """Verifica vers√£o do Python."""
    print("\nüêç Verificando Python...")
    version = sys.version_info
    
    if version.major == 3 and version.minor >= 9:
        print(f"   ‚úÖ Python {version.major}.{version.minor}.{version.micro} (OK)")
        return True
    else:
        print(f"   ‚ùå Python {version.major}.{version.minor}.{version.micro} (Requer 3.9+)")
        return False

def check_packages():
    """Verifica pacotes instalados."""
    print("\nüì¶ Verificando pacotes...")
    
    required_packages = [
        ("fastapi", "FastAPI"),
        ("uvicorn", "Uvicorn"),
        ("langgraph", "LangGraph"),
        ("langchain", "LangChain"),
        ("bs4", "BeautifulSoup4"),
        ("loguru", "Loguru"),
    ]
    
    all_ok = True
    for package, name in required_packages:
        try:
            __import__(package)
            print(f"   ‚úÖ {name}")
        except ImportError:
            print(f"   ‚ùå {name} (n√£o instalado)")
            all_ok = False
    
    return all_ok

def check_directories():
    """Verifica estrutura de diret√≥rios."""
    print("\nüìÅ Verificando diret√≥rios...")
    
    required_dirs = [
        "backend",
        "backend/agents",
        "backend/api",
        "backend/core",
        "backend/services",
        "backend/utils",
        "frontend",
        "logs",
        "output",
        "uploads",
    ]
    
    all_ok = True
    for directory in required_dirs:
        path = Path(directory)
        if path.exists():
            print(f"   ‚úÖ {directory}")
        else:
            print(f"   ‚ùå {directory} (n√£o existe)")
            all_ok = False
    
    return all_ok

def check_files():
    """Verifica arquivos essenciais."""
    print("\nüìÑ Verificando arquivos essenciais...")
    
    required_files = [
        ".env",
        "requirements.txt",
        "run.py",
        "backend/main.py",
        "backend/core/config.py",
        "backend/agents/state.py",
        "backend/agents/graph.py",
        "frontend/index.html",
    ]
    
    all_ok = True
    for file in required_files:
        path = Path(file)
        if path.exists():
            print(f"   ‚úÖ {file}")
        else:
            print(f"   ‚ö†Ô∏è  {file} (n√£o encontrado)")
            all_ok = False
    
    return all_ok

def check_env_file():
    """Verifica configura√ß√£o do .env."""
    print("\nüîë Verificando .env...")
    
    env_path = Path(".env")
    if not env_path.exists():
        print("   ‚ùå Arquivo .env n√£o encontrado")
        return False
    
    with open(env_path) as f:
        content = f.read()
    
    providers = {
        "OpenAI": "OPENAI_API_KEY",
        "Anthropic": "ANTHROPIC_API_KEY",
        "Google": "GOOGLE_API_KEY",
        "DeepSeek": "DEEPSEEK_API_KEY",
    }
    
    configured = []
    for name, key in providers.items():
        if key in content and len(content.split(f"{key}=")[1].split("\n")[0].strip()) > 10:
            print(f"   ‚úÖ {name}")
            configured.append(name)
        else:
            print(f"   ‚ö†Ô∏è  {name} (n√£o configurado)")
    
    if configured:
        print(f"\n   ‚ÑπÔ∏è  {len(configured)} provider(s) configurado(s)")
        return True
    else:
        print("\n   ‚ùå Nenhum provider configurado!")
        return False

def check_imports():
    """Testa imports do projeto."""
    print("\nüîç Testando imports...")
    
    try:
        # Tenta importar m√≥dulos do projeto
        sys.path.insert(0, str(Path.cwd()))
        
        from backend.core.config import get_settings
        print("   ‚úÖ backend.core.config")
        
        from backend.agents.state import MindmapState
        print("   ‚úÖ backend.agents.state")
        
        from backend.utils.logger import setup_logger
        print("   ‚úÖ backend.utils.logger")
        
        return True
        
    except ImportError as e:
        print(f"   ‚ùå Erro ao importar: {e}")
        return False
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Aviso: {e}")
        return True

def test_server_start():
    """Testa se o servidor pode iniciar."""
    print("\nüöÄ Testando inicializa√ß√£o do servidor...")
    
    try:
        from backend.main import app
        print("   ‚úÖ FastAPI app carregado")
        
        # Verifica rotas
        routes = [route.path for route in app.routes]
        print(f"   ‚ÑπÔ∏è  {len(routes)} rotas registradas")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
        return False

def print_summary(results):
    """Imprime resumo dos testes."""
    print_header("RESUMO")
    
    total = len(results)
    passed = sum(results.values())
    
    print(f"\n   ‚úÖ Passou: {passed}/{total}")
    print(f"   ‚ùå Falhou: {total - passed}/{total}")
    
    if passed == total:
        print("\n   üéâ TUDO OK! Sistema pronto para uso.")
        print("\n   Execute: python run.py")
        return True
    else:
        print("\n   ‚ö†Ô∏è  Alguns problemas encontrados.")
        print("\n   Revise a instala√ß√£o seguindo o README.md")
        return False

def main():
    """Executa todos os testes."""
    print_header("VALIDA√á√ÉO DA INSTALA√á√ÉO")
    print("\nVerificando configura√ß√£o do sistema...")
    
    results = {
        "Python": check_python_version(),
        "Pacotes": check_packages(),
        "Diret√≥rios": check_directories(),
        "Arquivos": check_files(),
        "Vari√°veis": check_env_file(),
        "Imports": check_imports(),
        "Servidor": test_server_start(),
    }
    
    success = print_summary(results)
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()